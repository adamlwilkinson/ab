########################################################################
#
#   Autobench test configuration file for mysql-bench benchmark
#
########################################################################

TEST_MODULE=sysbench_standard
. $AUTOBENCH_INCDIR/$TEST_MODULE.lua.inc

. $AUTOBENCH_INCDIR/engine_stat.inc.1

test_stage_run_pre()
{
  engine_stat.setup
  engine_stat.pse_start
}

test_stage_run_post()
{
  engine_stat.stop
  engine_stat.pse_stop
}


test_setup()
{
  # 
  # Put additional initialization code below
  #
  #profile information
  USE_OPROFILE=0
  #VMLINUX=/tmp/vmlinux-2.6.16.46-0.12-smp
  #VMLINUX=/tmp/vmlinux-2.6.16.60-0.21-smp
  #VMLINUX=/tmp/vmlinux-2.6.18-92.1.18.el5
  VMLINUX=/data0/ranger/vmlinux-2.6.27.25-170.2.72.oprofile_fix.fc10.x86_64

  #System statistic information: sar/vmstat/iostat
  COLLECT_STAT=1
  TEST_STAT_SAMPLE=1 # Get sample each 10 seconds

  #Test name
  TEST_NAME="sysbench_standard"
  
  #If test have subtests specify them here
  TEST_CASES="OLTP_RW OLTP_RO"

  # Basedir for backup datafiles
  #TEST_BACKUP_BASEDIR="$AUTOBENCH_BACKUP_BASEDIR/std-1M"
  TEST_BACKUP_BASEDIR="/mnt/tachion/toku"

  TEST_STAGE_PREPARE_GENERATE=""  # GENERATE INITIAL DATASET AND LOAD IT
  TEST_STAGE_PREPARE_RESTORE="1"  # RESTORE DATADIR FROM BACKUP

  # Number of rows for sbtest database
#  SYSBENCH_NUM_ROWS=1000000
  SYSBENCH_NUM_ROWS=25000
  SB_NUM_ROWS_PREPARE=$SYSBENCH_NUM_ROWS
  SYSBENCH_NUM_TABLES=25000

  # sysbench binary
  TEST_STAGE_RUN_EXE=$SYSBENCH_0_5_EXE

  #
  ENGINE_DEFAULTS_FILE_MYISAM=$TEST_CNF_DIR/sysbench-std-myisam.cnf
  ENGINE_DEFAULTS_FILE_INNODB=$TEST_CNF_DIR/sysbench-std-innodb-multi.10M.cnf
  ENGINE_DEFAULTS_FILE_TOKUDB=$TEST_CNF_DIR/sysbench-std-tokudb-multi.50M.cnf

  ENGINE_DEFAULTS_FILE_INNODB_LD=$TEST_CNF_DIR/sysbench-std-innodb-multi.10M.cnf
  ENGINE_DEFAULTS_FILE_TOKUDB_LD=$TEST_CNF_DIR/sysbench-std-tokudb-multi.50M.cnf

  ENGINE_DEFAULTS_FILE_MYISAM_NOAUTOINC=$TEST_CNF_DIR/sysbench-std-myisam.cnf
  ENGINE_DEFAULTS_FILE_INNODB_NOAUTOINC=$TEST_CNF_DIR/sysbench-std-innodb.cnf

  ENGINE_DEFAULTS_FILE_INNODB_BARRACUDA=$TEST_CNF_DIR/sysbench-std-innodb.cnf
 
  TEST_STAGE_WARMUP="1"
  TEST_STAGE_WARMUP_EXE='/bin/true'
#  TEST_ARGS_STAGE_WARMUP=" -uroot  $MYSQL_ARGS -e\'check table sbtest\'"
#  MYSQLD_ENV="LD_PRELOAD=/usr/local/lib/libjemalloc.so "  
#   MYSQLD_ENV="LD_PRELOAD=/data/bench/alexey.s/bin64_5152.toku/lib/mysql/libjemalloc-2.2.5-5.2.7-38674.so "
  MYSQLD_ENV="env LD_PRELOAD=/usr/local/lib/libtcmalloc.so env HEAPPROFILE=/tmp/mysqld.heap  "
}

test_pre_run()
{
  if [ -n "$MYSQL_CREATE_OPTIONS" ]; 
  then 
    SB_ARGS=$SB_ARGS' --mysql-create-options="$MYSQL_CREATE_OPTIONS"'
    echo "HERE $MYSQL_CREATE_OPTIONS"
  fi

  TEST_ARGS_STAGE_PREPARE='--db-name=$SERVER_DB --mysql-bin=$MYSQL \
                           --mysql-args=\"$MYSQL_ARGS\" \
                           --sysbench-bin=$TEST_STAGE_RUN_EXE \
                           --sysbench-args=\"'$SB_ARGS' prepare\"'

  TEST_ARGS_STAGE_RUN=$SB_ARGS' ${!TEST_CASE} run'

}

test_stage_warmup_post()
{
echo "ZZZ"
}

test_stage_warmup_pre()
{
  echo "HEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
  SB_ROUNDS=$(($SYSBENCH_NUM_TABLES / 1000 ))
  SB_PART=$(($SYSBENCH_NUM_TABLES - 1000*$SB_ROUNDS))

  echo "HEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"

  for idx in `seq 0 $SB_ROUNDS` ; do
  idx_start=$(($idx*1000+1))

  if [ $idx -eq $SB_ROUNDS ]; then
    idx_max=$(($idx*1000+$SB_PART))
  else
    idx_max=$(($idx*1000+1000))
  fi

  echo "IDX $idx IDX_S $idx_start IDX_MAX $idx_max"

  PIDLIST=""
  show_msg_date "WARMUP: do with mysql $MYSQL_ARGS -e 'select avg(id) from sbtest$i FORCE KEY (PRIMARY)' "

  for i in `seq $idx_start $idx_max` ; do
#     /bin/echo -n "$i "
##   for i in `seq 1 $SYSBENCH_NUM_TABLES` ; do 
      ( time mysql $MYSQL_ARGS -e "select avg(id) from sbtest$i FORCE KEY (PRIMARY); " sbtest  ) > $TEST_OUTDIR/warmup.${i}.out 2>&1   &
      PIDLIST="$PIDLIST $!"
    done 
# >> $TEST_OUTDIR/warmup.out
#   show_msg_date "WARMUP: $PIDLIST"
   wait $PIDLIST

  echo
  done

  show_msg_date "WARMUP: done"
}

test_stage_cleanup_post()
{
#  killall -9 mysqld
  echo 3 > /proc/sys/vm/drop_caches
  mv /tmp/mysqld.heap.* $TEST_OUTDIR/
}
